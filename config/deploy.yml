# Name of your application. Used to uniquely configure containers.
service: activity_pub_app

# Name of the container image.
image: mbajur/activity_pub_app

volumes:
  - "/home/app/activity_pub_app-cache:/app/tmp/cache"
  - "/home/app/activity_pub_app-shared:/app/shared"
  - "/home/app/activity_pub_app-storage:/app/storage"

# Deploy to these servers.
servers:
  web:
    hosts:
      - 5.22.223.28
    labels:
      traefik.http.routers.activity_pub_app.entrypoints: websecure
      traefik.http.routers.activity_pub_app.rule: Host(`aptest.mbajur.com`)
      traefik.http.routers.activity_pub_app.tls.certresolver: letsencrypt
    options:
      network: "private"


  job:
    hosts:
      - 5.22.223.28
    cmd: bundle exec good_job
    options:
      network: "private"

# Credentials for your image host.
registry:
  server: ghcr.io
  username: mbajur

  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY
env:
  clear:
    HOSTNAME: aptest.mbajur.com
    APP_DOMAIN: aptest.mbajur.com
    DB_HOST: 5.22.223.28
    RAILS_SERVE_STATIC_FILES: true
    RAILS_LOG_TO_STDOUT: true
  secret:
    - POSTGRES_PASSWORD
    - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1
builder:
  dockerfile: Dockerfile
  multiarch: false
  cache:
    type: registry

# Use accessory services (secrets come from .env).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
accessories:
  db:
    image: postgres:15
    host: 5.22.223.28
    port: 5432
    env:
      clear:
        POSTGRES_USER: "activity_pub_app"
        POSTGRES_DB: 'activity_pub_app_production'
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
    options:
      network: "private"

# Configure custom arguments for Traefik. Be sure to reboot traefik when you modify it.
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json
traefik:
  options:
    network: "private"
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    accesslog: true
    accesslog.format: json
    accesslog.fields.headers.names.User-Agent: keep

    entryPoints.web.address: ":80"

    entryPoints.websecure.address: ":443"
    entryPoints.websecure.http.tls.domains[0].main: "aptest.mbajur.com"

    entryPoints.web.http.redirections.entryPoint.to: websecure # We want to force https
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true

    certificatesResolvers.letsencrypt.acme.email: "mbajur@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json" # Must match the path in `volume`
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
